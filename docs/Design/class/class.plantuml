@startuml class_diagram

class Bin {
    - rfid_id: int
    - weight_empty: float
    - weight_current: float
    - type: string
    - uses: int
    + get_amount(): int 
    + get_type(): string
    + get_use():int
    + set_type(string): void
    + set_use(int): void
    + set_weight(float): void
    + set_weight_empty(float): void
    + get_position_down(): [float,float]
    + get_position_up(): [float,float]
    + Bin(type: string, weight_empty:float, weight_current:float, uses:int)
}

class Bucket {
    - id: int
    - position : const [float,float]
    - cur_Bin : *Bin
    + get_position_up()
    + get_position_down()
    + Bucket(id:int ,position: [float,float],  cur_Bin: *Bin)
    ~ set_Bin(Bin: *Bin): virtual void
    + get_Bin(): *Bin
    + is_empty(): virtual bool
    + read_Bin_rfid(): void

}

class OutputBucket {
    ~ set_Bin(Bin: *Bin): void
    + is_empty(): bool
    + OutputBucket(id: int, position: [float,float], cur_Bin: *Bin)
}

class Storage
{
    - Buckets: array<Buckets,24>
    - interface_Bucket: OutputBucket
    - Bins: vector<Bins>
    + update_interface(): void
    + store(): status
    + map(): void
    + retrieve(rfid_id: int): status
    + reorganize(): status
    + get_Bucket_by_rfid(rfid: int): *Bucket
    + get_Bucket_by_id(id: int): *Bucket
    + get_Buckets_by_type(type: string): vector<*Bucket>
    - move_to(source: *Bucket,destination: * Bucket, force: bool) : status
}

Bucket "1" o- "0..1" Bin : contains >
Bucket <|-- OutputBucket

Storage *-- "24" Bucket
Storage *-- "0..*" Bin

class SPARtS {
    - Storage: Storage
    - SpartWebserver: *SpartWebserver
    - state: SPARtS_STATE
    - status: SPARtS_STATUS
    - events: event_group
    + get_state(): SPARtS_STATE
    + send_ok(): void
    - reset_events(): void
    + run(): void
    + SPARtS()
    + to_json(): string
}

SPARtS *-- Storage

class SpartWebserver {
    + start(SPARtS: *SPARtS, webhook): void
    + send_event(): void
    + await_config(): config
}
SPARtS - SpartWebserver

class CamCommunicationMaster {
    + setup_comm(image_uri, wifi_ssid,wifi_password): CamStatus
    + analyze_image(): CamResult
}
SPARtS --> CamCommunicationMaster
SpartWebserver --> CamCommunicationMaster

MovementControl <-r- Storage

struct CamResult {
    + type: string
    + amount: int
    + mixed : bool
    + to_json(): string
}
CamCommunicationMaster . CamResult

class ConveyorControl {
    - current_position: int
    + next_Bin(): void
    + calibrate(): void
}

ConveyorControl <- SPARtS

class MovementControl {
    - speed_movement: int
    - speed_platform: int
    - current_position: [float,float]
    - platform_extended: bool
    + get_position(): [float,float]
    + move_to(x: float, y:float): void
    + calibrate_movement(): void
    + calibrate_platform(): void
    + platform_extend():void 
    + platform_retract(): void
    + set_speed_movement(speed:int): void
    + set_speed_platform(speed:int): void

}


@enduml