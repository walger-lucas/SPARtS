name: PlatformIO CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    strategy:
      fail-fast: false
      max-parallel: 20
      matrix:
        boards: ['all']
        additional_path: ['']
        # add examples here and define which boards should be tested (only compile test)
        example: [
          CustomI2C,
          CustomSPI,
          CheckFirmware,
          DumpInfo,
          ReadUidMultiReader,
        ]
        include:
          - boards: 'all'
            additional_path: 'Hack/'
            example: 'ChangeUID'
          - boards: 'all'
            additional_path: 'Hack/'
            example: 'FixBrickedUID'
        
    steps:
    - uses: actions/checkout@v2
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v2
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio==4.3.4
        platformio settings set enable_telemetry no # disable spy
    - name: Run PlatformIO all Boards
      if: ${{ contains(matrix.boards, 'all') }}
      # test all
      run: platformio ci --lib=. --board=uno --board=megaatmega1280 --board=due --board=zero --board=d1_mini
      env:
        PLATFORMIO_CI_SRC: examples/${{ matrix.additional_path }}${{ matrix.example }}/${{ matrix.example }}.ino
